import java.awt.event.*;
import java.awt.*;
import java.util.Vector;
import java.awt.image.BufferedImage;
import java.util.Random;
import java.applet.*;
import java.net.*;
import java.util.Iterator;

public class LevelSetCanvas extends Canvas implements MouseListener,MouseMotionListener,KeyListener {

	int boardWidth;
	int boardHeight;
	private BufferedImage buffer;
	private Graphics bufG;
	//Vector<Point2d> surface = new Vector<Point2d>();
	Vector<Int2d> surface = new Vector<Int2d>();
	Vector<Int2d> destinations = new Vector<Int2d>();
	LevelSetApplet japp;
	int pixelsWide;
	int pixelsHigh;
	int res;
	CalculateDistance cd;
	int pRadius = 3;
  boolean closeInterface = false; // Removed checkbox for it, not really necessary
	Color bgColor = new Color(230,230,230);
	
	public LevelSetCanvas(int boardWidth, int boardHeight, LevelSetApplet japp)
	{
	this.boardWidth = boardWidth;
	this.boardHeight = boardHeight;
	this.japp = japp;
	
	addMouseListener( this );   
	addMouseMotionListener( this );     
	addKeyListener( this );           
		  
	buffer = new BufferedImage(boardWidth, boardHeight, 
      BufferedImage.TYPE_INT_RGB);
	bufG = buffer.getGraphics();
	bufG.setColor(Color.WHITE);
	bufG.fillRect(0,0,boardWidth,boardHeight);	
	}
	
	public void loadPreset(String preset)
	{	
	boolean useDest = false;
	if(preset.equals("Test rectangle"))
		{
		int iS = 60;
		int iF = 360;
		int jS = 100;
		int jF = 200;
		for(int i=iS; i<=iF; i++)
			{
			Int2d p = new Int2d(i,jS);
			surface.add(p);
			}
		for(int i=iF; i>=iS; i--)
			{
			Int2d p = new Int2d(i,jF);
			surface.add(p);
			}
		}
	if(preset.equals("Signed distance of sample curve"))
		{	
		int[] iS = {464,463,463,462,462,461,460,460,459,459,458,458,457,457,456,455,454,453,453,452,451,450,449,448,446,445,443,442,440,440,439,437,435,434,434,432,429,427,426,423,421,420,418,416,414,411,409,407,404,403,401,399,397,394,392,390,387,385,384,382,380,379,378,376,374,371,369,367,365,364,363,361,359,357,356,354,353,351,349,347,346,344,344,342,340,339,337,335,334,332,331,330,329,328,327,326,325,325,323,322,321,320,319,318,317,315,314,313,312,311,310,308,308,306,306,305,304,303,303,302,301,301,300,299,299,298,297,297,295,295,295,294,293,292,291,290,289,288,287,286,285,284,283,282,280,279,277,276,275,273,271,270,268,267,266,264,262,260,258,256,255,253,250,248,247,245,244,242,240,238,237,235,234,233,232,230,228,227,226,225,223,221,220,220,219,217,215,214,213,213,212,212,211,210,209,209,208,207,205,204,203,202,201,200,200,199,198,197,197,195,194,193,192,191,190,189,188,187,187,185,184,182,180,178,176,174,172,169,167,165,163,160,158,155,152,150,147,145,144,142,140,138,136,135,132,130,128,126,124,122,120,117,115,112,109,107,104,102,99,97,95,92,90,88,86,84,82,80,79,78,77,76,75,75,74,73,72,72,70,70,69,69,68,67,67,67,67,67,67,67,67,67,67,67,68,69,70,71,72,73,75,77,78,80,82,83,84,86,88,91,94,95,98,100,103,105,108,111,113,116,119,121,124,126,128,129,130,132,133,135,137,139,141,143,146,149,151,154,156,158,160,161,162,164,166,168,170,172,172,174,176,177,178,178,179,180,181,182,183,185,186,187,189,190,191,192,193,194,195,196,197,198,199,199,199,199,199,199,199,199,199,199,199,199,199,199,199,198,198,197,197,196,195,194,193,192,191,190,190,189,188,187,186,185,185,184,183,181,180,179,178,176,174,171,169,168,166,164,163,161,158,155,153,151,148,146,145,143,141,140,139,138,136,134,132,130,128,125,123,121,119,117,115,113,113,111,109,107,105,103,101,99,97,95,94,93,91,90,89,87,87,86,85,84,83,82,81,80,80,79,77,76,75,74,73,72,72,70,70,70,68,68,66,66,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,65,65,66,66,66,67,68,68,68,69,69,69,70,71,73,74,76,77,78,78,79,80,81,82,84,84,86,87,89,90,92,93,94,95,97,99,101,103,106,108,111,113,116,117,119,121,124,127,130,132,135,138,141,145,147,149,153,155,157,160,163,165,168,171,175,178,180,184,187,191,194,196,199,202,205,208,210,212,216,219,221,224,227,229,231,234,237,240,243,246,249,252,255,258,261,264,267,271,274,276,278,281,283,285,287,290,292,295,298,301,304,306,308,310,312,313,314,315,317,318,319,320,321,322,322,322,322,322,322,322,322,322,320,320,318,318,317,316,316,315,314,313,312,311,309,308,307,305,303,301,300,298,296,294,292,291,288,286,284,281,279,277,275,274,273,271,269,268,267,265,263,262,260,258,256,254,252,250,248,245,243,242,240,237,235,232,231,228,226,225,223,221,219,217,217,215,214,213,212,211,210,209,209,208,207,207,207,207,207,207,207,207,207,207,207,207,207,208,209,209,209,209,210,211,211,211,212,212,212,213,214,214,215,215,215,216,217,217,218,218,218,219,221,222,222,223,224,225,226,226,227,228,229,230,231,232,233,234,235,236,238,238,239,240,241,242,244,246,247,249,251,252,253,255,257,258,258,259,260,262,264,267,268,270,272,274,276,277,278,280,283,285,287,288,290,291,292,293,294,296,298,300,303,306,308,310,311,312,313,314,316,317,318,319,321,322,323,323,325,326,327,329,331,332,333,335,336,336,336,337,337,337,338,339,339,339,339,339,339,339,339,339,339,339,339,338,338,338,337,337,337,337,337,337,337,337,337,337,337,337,337,337,337,337,337,337,337,338,339,340,340,341,342,342,342,343,345,346,347,349,350,351,352,354,355,357,358,359,360,361,362,362,362,363,364,365,366,367,368,370,370,371,371,371,372,373,374,375,377,378,379,381,382,383,385,386,388,389,392,394,396,398,400,403,405,406,409,412,414,416,419,421,423,426,429,431,433,434,436,438,440,442,443,444,446,447,448,449,450,451,452,453,454,455,455,455,456,456,456,456,456,456,456,456,456,456,455,455,454,453,452,451,450,449,448,447,446,445,443,441,439,437,436,435,434,433,433,432,431,429,428,427,426,424,423,422,422,422,422,422,422,422,422,422,422,422,422,422,422,422,422,422,422,422,423,423,423,423,423,423,423,423,423,423,423,423,422,421,421,420,419,418,417,417,416,415,414,413,412,411,410,409,407,405,403,402,401,400,398,396,395,394,392,391,390,389,389,388,387,386,385,384,384,383,383,382,382,381,381,381,380,380,380,380,380,380,380,380,380,380,380,381,381,382,383,383,384,385,386,386,387,387,389,389,389,390,392,393,393,394,395,397,398,399,400,401,402,403,403,404,405,406,407,408,409,410,411,411,412,414,415,416,417,417,418,419,420,421,421,422,424,425,426,426,427,428,429,431,433,434,436,437,437,438,439,440,441,442,442,442,443,444,444,444,444,444,444,444,444,444,444,444,444,444,444,442,442,440,440,439,438,437,436,434,432,430,428,427,425,423,421,419,417,417,415,413,411,410,409,408,407,405,403,401,399,397,395,393,391,389,387,384,382,380,377,375,372,371,369,367,366,364,363,362,361,360,359,359,358,358,357,357,356,356,356,356,356,356,356,356,357,357,357,358,360,361,362,364,365,367,368,370,371,373,374,376,377,378,380,382,383,385,387,389,392,394,396,397,399,401,403,404,404,406,408,410,411,413,414,416,417,418,419,420,421,421,421,422,423,424,425,426,427,429,430,431,432,433,434,435,436,438,440,441,442,443,445,447,448,449,451,452,453,455,456,458,461,462,463,464,465,466,467,467,468,469,469,469,470,471,471,471,471,472,473,473,473,474,474,474,474,474,474,474,474,474,474,473,472,471,470,470,469,468,467,466,465,464,463};
		int[] jS = {86,85,84,84,82,81,79,78,77,76,75,73,73,72,70,68,67,66,65,63,62,61,59,57,56,54,53,51,50,49,48,48,48,47,46,45,44,43,42,41,40,40,39,39,38,38,37,37,35,35,34,34,34,34,33,33,33,32,32,32,32,32,32,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,32,32,32,33,34,35,36,37,38,39,40,42,43,44,44,45,47,48,49,50,51,53,55,56,58,60,61,63,65,67,68,69,71,72,75,76,77,79,81,83,85,87,89,91,92,94,96,97,99,102,104,106,108,111,113,115,117,119,121,122,124,127,129,131,133,135,137,139,141,142,144,145,147,148,149,149,149,149,149,149,149,149,149,149,149,149,149,148,148,147,146,145,145,144,143,143,142,141,140,139,138,136,134,134,133,132,130,128,127,127,126,125,123,122,122,120,119,117,114,111,110,109,107,105,103,102,100,99,98,96,94,93,91,89,88,87,85,83,82,81,80,78,77,75,73,72,70,69,67,66,65,64,63,62,61,60,60,60,60,60,60,60,60,60,60,60,61,61,61,62,63,64,65,66,67,68,69,71,72,73,75,77,78,80,82,84,86,87,89,90,92,94,95,97,99,101,103,106,108,111,114,116,119,121,123,125,128,131,132,135,137,140,142,144,146,148,150,152,154,156,156,158,159,161,162,163,163,163,163,163,163,164,164,164,164,164,164,164,165,165,165,166,166,167,167,167,167,167,167,167,167,167,167,168,168,169,170,171,172,172,173,174,174,174,175,176,177,178,179,180,180,180,181,182,183,183,183,184,185,187,189,190,192,194,196,196,198,200,202,204,206,207,208,209,211,212,213,214,216,217,218,219,221,222,223,225,226,228,230,232,234,235,237,239,241,243,245,246,247,248,249,251,251,251,251,252,253,253,253,254,254,254,255,255,256,256,257,258,258,259,260,261,262,264,265,265,265,266,267,267,267,268,268,269,270,271,272,274,275,276,277,279,280,282,283,285,286,286,288,290,292,294,296,298,300,301,303,305,307,308,310,312,314,315,317,319,322,325,328,330,332,335,338,341,343,345,348,351,354,356,359,362,365,368,370,373,376,378,380,382,384,386,387,388,389,390,392,393,395,396,398,400,402,404,406,407,408,409,411,412,413,414,415,417,418,419,420,422,423,425,426,427,427,428,429,431,432,433,433,435,436,437,438,439,440,441,441,442,443,444,445,446,447,448,449,450,451,452,453,453,454,454,455,456,456,456,457,457,457,458,458,458,458,458,459,459,459,459,459,460,460,460,460,460,460,460,460,460,459,458,458,457,456,456,455,455,454,454,454,453,452,452,451,451,450,449,447,447,446,445,444,443,442,441,440,440,439,438,437,435,433,431,429,428,427,425,424,422,420,418,416,413,411,408,407,405,402,400,398,397,394,392,390,387,384,380,377,374,372,369,367,365,363,361,361,361,361,361,361,361,361,361,361,361,361,361,361,361,361,361,361,361,361,361,361,361,361,361,362,362,362,362,363,364,365,366,367,367,368,369,370,371,372,372,372,373,374,374,374,374,374,374,374,374,374,373,372,371,370,369,368,368,367,366,365,364,363,361,360,358,356,355,354,353,351,350,349,348,346,344,342,340,339,336,333,332,331,329,328,326,324,323,321,319,319,317,315,313,311,309,307,306,304,302,301,299,297,295,293,291,289,286,284,282,280,277,275,273,272,270,268,267,265,263,261,261,259,258,256,255,253,251,250,249,249,248,247,246,245,245,244,244,243,243,243,243,243,242,242,242,242,242,243,243,243,243,243,243,243,243,243,244,245,246,247,248,249,250,251,252,252,253,254,255,257,258,259,260,261,263,265,266,268,270,273,275,277,279,279,281,282,284,285,287,289,290,291,292,293,294,295,296,297,299,302,303,305,307,310,311,313,315,316,318,319,321,322,324,325,327,329,330,331,333,336,337,338,340,342,344,346,348,350,351,353,354,356,357,359,361,364,365,366,369,371,372,374,376,378,380,382,384,386,387,388,390,392,394,395,398,399,400,401,402,404,405,405,406,407,408,410,411,411,411,411,411,411,411,411,411,411,411,411,411,410,410,410,409,409,407,407,406,405,404,402,401,400,399,398,396,396,394,392,390,388,386,384,382,379,377,374,372,370,367,365,362,359,357,354,351,349,347,345,344,343,342,340,338,336,335,334,332,331,331,330,330,329,328,327,326,326,325,325,325,325,325,325,326,327,327,327,328,329,330,330,330,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,346,347,348,349,350,352,353,354,355,356,357,358,359,360,361,362,364,365,366,367,368,368,369,370,371,372,372,372,372,372,372,372,372,372,372,372,371,371,370,369,368,367,366,365,364,363,362,361,359,357,356,354,352,351,350,348,346,345,344,342,341,340,339,337,335,334,333,332,330,329,327,325,324,322,321,320,319,317,315,314,313,312,310,309,308,307,307,305,304,303,302,302,301,300,299,298,297,297,296,295,294,293,293,292,291,290,290,289,288,287,286,284,284,283,282,282,281,280,280,278,278,277,276,275,274,272,272,271,269,267,265,263,261,259,258,258,256,253,252,250,248,246,246,244,243,241,239,238,236,234,233,231,230,228,226,224,221,219,216,214,212,210,208,206,204,202,199,196,194,193,192,189,188,186,185,183,182,181,181,180,179,177,176,175,174,172,171,169,168,166,165,163,161,159,158,156,153,151,149,147,145,143,141,139,137,135,133,132,130,129,127,125,124,122,121,119,117,116,115,114,112,111,109,108,107,105,103,102,101,99,98,97,96,96,94,94,93,93,92,91,91,91,91,91,91,91,91,91,92,93,95,96,97,98,99,101,103,104,106,108,109,111,112,113,114,115,116,117,118,119,119,120,120,120,121,122,123,123,123,123,123,123,123,124,124,124,124,124,124,124,124,124,124,124,124,124,124,123,123,123,122,122,121,121,120,119,119,118,117,116,115,113,112,111,109,107,106,105,104,102,100,99,98,97,96,95,94,93,93,92,91,90,89,89,88,88,87,86,85,85};
		int len = iS.length;
		for(int i=0; i<len; i++)
			{
			Int2d p = new Int2d(iS[i],jS[i]);
			surface.add(p);
			}
		}
	else if(preset.equals("Shortest path with obstacles"))
		{
		useDest = true;
		}
	else if(preset.equals("Nonsimple curve"))
		{
		int[] iS = {247,246,245,244,243,243,241,239,238,236,234,233,231,230,229,229,228,226,225,224,224,223,221,220,219,217,217,216,214,213,212,210,209,207,205,203,202,200,197,196,195,193,191,188,186,184,183,180,177,176,175,174,172,170,168,167,166,165,164,162,161,160,159,157,156,155,153,152,151,150,149,149,148,147,146,145,144,143,142,142,141,140,140,139,138,137,137,136,135,134,133,133,132,131,130,130,129,128,127,126,125,125,125,124,124,123,123,123,123,122,122,122,122,122,122,122,122,122,122,122,123,123,124,125,126,127,128,128,128,129,131,132,133,135,137,138,139,141,142,144,145,146,147,149,151,152,154,156,157,158,160,162,163,165,167,170,171,174,177,180,182,184,185,186,187,190,192,194,197,200,203,205,207,207,208,209,211,213,215,215,217,219,220,221,223,224,226,228,230,230,232,233,235,236,238,240,241,242,242,244,245,247,247,249,250,252,253,255,257,259,260,260,261,262,264,265,265,266,267,268,269,269,270,270,270,270,271,271,271,271,271,271,271,271,271,271,271,271,271,270,270,269,268,268,268,267,267,266,266,266,266,265,265,264,264,264,263,263,263,263,263,262,262,262,262,261,261,261,261,260,260,260,260,259,259,258,258,258,257,257,257,257,257,257,257,257,257,257,257,257,258,258,258,258,258,258,259,260,261,262,262,263,265,267,269,270,270,271,272,274,275,276,277,278,280,281,282,284,286,288,290,291,293,294,296,298,299,301,303,305,307,309,310,312,314,316,318,319,321,324,325,327,329,330,332,334,336,338,340,341,343,344,346,348,348,350,352,354,357,359,362,365,367,369,372,374,375,377,379,381,382,383,385,387,389,391,392,394,395,395,395,395,395,395,395,395,395,395,395,395,395,395,395,395,395,395,395,395,395,395,394,394,394,393,393,393,393,392,392,392,391,390,389,389,388,387,386,385,384,382,381,379,378,378,376,374,372,371,368,366,365,364,362,360,358,356,354,354,352,351,350,349,348,346,344,342,341,340,338,336,335,334,333,331,329,327,325,324,322,320,318,316,314,312,310,308,306,303,302,300,298,296,295,293,293,291,289,288,286,284,284,282,281,280,279,277,276,275,274,273,272,271,269,267,266,264,262,260,258,255,253,250,248,246,244,241,239,237,234,233,231,229,228,226,224,222,220,218,217,215,213,212,210,208,207,205,204,203,202,200,199,198,197,195,194,193,192,190,188,187,185,183,182,181,180,178,177,176,174,174,172,170,169,168,167,165,164,163,162,161,160,158,158,157,156,155,154,153,151,150,149,148,147,145,143,143,141,140,138,136,135,133,131,129,128,126,124,123,122,120,119,118,117,116,116,115,114,113,113,112,111,111,111,110,110,109,109,109,109,108,108,108,108,107,107,107,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,107,108,109,110,111,112,113,114,115,116,117,118,120,122,124,125,127,128,129,130,131,134,135,135,136,138,140,142,144,147,149,151,153,155,158,160,162,164,166,168,169,171,173,176,179,182,184,185,187,189,191,194,197,200,204,208,210,213,215,216,218,220,221,223,226,229,232,234,237,239,241,243,245,247,247,250,252,254,257,259,260,262,264,265,266,267,268,268,268,269,270,271,272,272,272,273,274,275,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,292,292,292,293,293,293,293,293,293,293,293,293,293,293,293,293,292,292,292,291,290,289,289,288,286,286,284,284,283,281,280,279,278,278,277,276,275,274,273,272,271,270,269,268,267,265,265,264,262,261,260,259,259,258,256,255,253,252,251,249,248,247,245,244,242,241,239,238,236,234,232,230,228,226,224,222,221,219,217,216,214,212,210,208,206,204,202,200,198,196,195,193,191,188,186,183,181,180,178,176,175,173,171,169,167,165,164,162,160,158,157,156,154,152,150,148,146,145,143,142,140,139,139,138,136,134,132,131,130,130,128,126,125,124,122,122,120,118,117,115,114,113,112,111,110,108,107,106,105,104,102,102,101,100,99,97,97,96,95,94,93,92,90,89,88,87,86,84,83,82,80,78,77,75,74,72,72,71,70,68,66,65,64,62,60,58,57,56,55,55,54,53,52,51,51,49,48,47,46,45,44,44,42,41,40,38,37,35,34,33,32,31,30,29,28,27,26,25,24,24,23,22,21,20,20,19,18,17,16,16,15,15,14,14,14,14,13,13,13,13,12,12,12,12,12,11,11,11,11,11,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,11,11,11,11,11,11,11,11,12,12,12,13,13,13,14,15,17,18,20,21,23,24,26,28,30,33,35,38,40,43,46,49,51,54,56,58,61,63,66,68,70,72,75,77,80,83,85,88,90,93,95,97,100,102,104,106,109,111,115,117,119,121,125,127,130,133,136,139,141,143,145,148,151,154,157,159,161,165,168,171,173,176,179,182,185,188,191,193,196,198,200,203,206,208,209,210,213,215,218,222,225,227,229,231,235,237,239,243,246,249,251,253,256,259,262,264,266,269,272,274,277,280,283,285,288,289,291,294,297,300,302,304,306,308,309,311,314,316,319,322,324,327,330,332,334,336,338,340,342,344,346,349,352,355,357,360,363,365,367,369,372,374,376,378,381,383,385,386,388,390,392,393,395,397,399,400,402,404,406,408,410,412,414,416,418,418,420,421,422,424,425,426,428,429,430,430,432,433,434,436,437,438,439,440,441,442,443,444,444,444,445,445,445,445,445,445,445,445,445,445,445,445,445,444,443,442,441,440,440,439,438,437,436,434,433,432,431,429,427,425,424,423,420,419,417,415,414,413,412,410,408,408,407,406,405,404,404,403,401,399,397,395,394,392,391,389,388,387,386,385,383,382,381,380,379,378,378,377,377,376,376,375,375,375,375,375,375,375,375,375,375,376,376,376,377,377,378,378,379,379,380,381,382,382,383,384,385,386,388,389,390,390,391,392,394,395,396,396,397,398,399,400,402,403,404,404,405,406,408,409,410,411,412,414,415,416,418,418,418,419,420,421,422,422,422,422,422,422,422,422,422,422,422,422,422,422,422,422,422,422,422,422,422,422,422,421,421,421,419,419,419,418,417,416,415,414,414,413,413,412,411,411,410,409,409,407,406,405,404,403,402,400,399,399,397,396,395,394,394,393,392,391,390,389,388,386,384,383,382,381,380,380,378,377,376,374,372,371,369,368,366,364,361,360,358,355,352,349,346,344,342,340,339,339,338,338,337,337,337,337,337,337,337,337,337,337,337,337,338,338,338,338,339,340,340,340,340,341,342,343,344,345,346,347,349,350,351,353,354,355,357,360,361,363,365,368,370,373,375,377,380,382,384,386,388,389,391,393,395,397,398,400,403,405,409,412,415,417,420,423,425,427,430,432,435,437,439,442,446,449,452,455,458,461,463,465,467,469,471,473,474,476,478,481,483,485,488,491,493,496,498,500,503,506,509,511,514,517,520,523,526,528,530,532,533,535,536,537,539,540,542,544,546,547,549,550,551,553,555,557,558,560,560,562,562,562,563,563,563,563,563,563,563,563,563,563,563,564,564,564,564,564,563,562,562,560,560,560,560,560,559,558,558,558,556,556,556,554,554,554,553,552,552,551,551,550,549,549,549,548,547,547,546,545,544,543,542,542,541,540,539,538,536,535,533,531,528,526,525,524,522,520,519,517,514,511,508,505,502,500,498,497,495,494,492,491,489,488,486,484,483,481,479,477,476,474,472,470,468,467,464,462,459,457,454,452,449,447,446,444,441,439,436,434,431,429,426,424,421,420,418,416,414,412,411,409,407,404,401,398,396,394,391,388,385,383,380,377,375,372,370,368,366,364,362,360,358,356,354,352,350,348,345,343,341,338,337,335,334,332,329,328,326,324,322,321,319,318,316,314,311,309,307,306,304,303,301,299,297,295,293,291,288,286,285,284,281,279,277,275,272,270,268,266,263,260,259,257,255,252,250,247,245,243,240,239,237,236,235,233,232,230,227,225,223,221,219,218,216,214,212,209,206,204,202,202,200,199,197,195,194,192,190,188,186,184,183,181,179,177,175,172,171,169,167,164,161,159,157,156,154,152,150,147,146,144,143,142,140,139,138,137,136,135,133,131,129,127,125,124,121,119,118,116,114,113,111,108,105,102,99,96,94,92,90,88,87,86,85,83,80,78,76,75,74,73,71,70,69,68,67,66,65,64,63,61,61,60,58,58,57,56,55,54,53,52,51,50,49,49,49,48,47,46,45,44,43,42,42,41,41,41,40,40,39,39,37,37,37,37,35,35,35,35,35,35,35,35,35,35,35,36,36,37,37,38,38,38,39,40,41,42,42,42,43,44,45,46,47,48,49,50,51,52,54,55,57,58,59,61,62,63,65,66,67,67,69,70,71,73,74,75,77,78,79,80,82,84,86,87,88,90,91,93,94,96,98,99,101,104,106,108,110,113,114,115,118,120,121,124,126,128,130,133,135,138,140,143,145,146,148,151,153,155,158,160,162,165,167,169,171,173,175,176,178,180,182,184,186,188,191,193,195,197,198,201,203,206,208,210,211,214,216,219,221,223,225,227,229,231,234,236,238,240,242,244,245,247,249,250,252,253,255,256,258,259,261,263,264,264,265,268,270,272,275,278,281,283,286,288,290,293,294,296,298,300,302,303,305,307,309,312,314,316,317,319,320,321,322,324,326,328,330,332,332,334,336,338,340,341,343,344,345,346,347,348,349,349,349,349,349,350,351,351,351,351,351,351,351,351,351,351,351,351,351,351,351,351,351,351,351,351,351,351,351,351,351,350,350,350,349,348,347,347,346,346,345,344,343,342,341,340,339,338,338,336,335,334,332,330,328,327,326,325,324,323,322,321,319,317,316,314,311,309,307,304,303,301,299,298,297,296,295,294,292,290,288,286,285,283,281,280,279,278,277,275,274,273,271,269,268,267,266,265,264,263,262,262,261,260,259,258,258,257,256,255,254,254,254,253,252,252,251,250,249,249,249,249,248,248,247};
		int[] jS = {7,8,9,10,11,12,13,15,17,18,20,22,23,24,24,26,27,28,29,29,30,32,32,33,34,35,36,37,38,38,40,41,42,43,43,44,45,46,47,48,49,50,50,51,52,53,54,55,57,58,59,60,61,61,62,63,64,66,67,68,69,69,70,72,73,74,76,76,77,78,79,80,80,81,83,85,87,88,89,90,92,93,94,95,97,98,99,100,102,104,106,107,108,110,112,114,116,118,120,122,123,125,127,128,130,132,134,135,136,138,140,141,143,144,146,147,149,150,152,153,155,156,158,160,161,162,163,164,166,167,169,170,172,173,175,176,178,179,180,181,181,182,183,184,185,186,187,188,188,188,188,188,188,188,188,188,188,188,189,189,189,189,189,189,189,189,189,189,189,187,187,186,186,185,185,184,184,183,182,181,180,180,179,178,177,177,176,175,175,174,173,173,172,171,170,169,169,169,168,168,167,167,166,165,165,164,163,162,161,160,160,159,159,158,157,156,155,154,153,152,151,150,149,148,147,146,145,143,142,141,140,139,138,137,136,134,133,132,131,129,128,127,126,125,124,123,122,121,120,119,118,116,115,114,113,112,110,109,108,107,106,104,103,102,100,99,98,97,96,96,95,94,93,92,91,90,89,88,88,87,86,85,84,83,82,81,80,79,78,77,75,74,73,72,71,70,69,67,67,66,65,64,62,60,60,59,58,57,56,55,55,55,54,53,52,52,51,50,50,49,48,48,47,46,46,46,45,45,45,44,44,44,44,44,44,44,44,44,44,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,46,47,48,48,49,51,52,53,55,56,57,58,59,60,61,63,64,65,67,69,71,73,75,77,78,79,80,81,82,83,84,85,86,88,90,91,93,95,97,99,102,104,105,106,108,110,112,114,115,117,119,121,122,123,125,127,128,130,131,133,133,135,136,138,140,141,143,143,145,147,148,149,151,153,155,157,159,161,163,165,167,167,169,170,171,172,173,174,174,174,176,177,178,179,179,179,180,181,182,183,184,185,185,185,186,186,187,188,189,190,191,192,193,194,194,194,195,196,197,198,199,199,199,200,201,202,203,203,203,204,204,204,205,205,205,206,206,206,206,206,206,207,207,208,209,209,209,210,211,212,212,213,213,214,214,214,215,215,215,215,216,216,216,216,216,216,216,216,216,216,216,216,216,216,216,216,216,216,216,217,217,217,217,217,218,219,219,220,221,222,222,222,223,224,225,226,228,228,229,230,230,231,232,234,235,236,237,238,239,239,241,242,243,244,246,247,249,250,251,253,255,256,258,260,262,264,267,269,271,274,276,278,281,283,285,287,289,291,293,294,296,298,300,302,303,305,305,307,308,310,313,313,314,316,317,318,319,320,322,324,325,327,329,330,331,333,334,336,337,339,340,342,343,344,346,348,349,350,351,352,354,355,357,359,361,363,364,365,367,369,371,373,374,376,377,379,381,383,385,387,387,389,390,392,394,394,396,398,400,401,403,405,406,407,408,408,409,410,411,412,412,412,414,414,414,415,415,416,416,417,417,417,417,417,417,417,417,417,417,417,417,418,418,418,418,418,418,418,418,418,418,418,418,416,416,416,415,414,414,413,411,410,408,408,406,406,405,404,403,402,401,400,399,397,395,394,393,391,390,389,388,386,385,384,383,382,381,379,378,377,376,375,373,372,369,367,365,362,360,357,355,352,350,347,345,342,340,337,334,332,329,327,326,323,321,319,316,314,312,310,307,306,304,303,301,299,297,295,293,292,289,287,285,284,282,280,277,275,274,272,269,266,263,261,259,257,255,252,250,247,244,242,240,237,236,234,232,229,226,223,221,219,217,214,211,208,205,202,199,197,194,191,188,186,184,181,178,176,173,170,168,165,162,160,157,155,153,151,149,147,145,143,141,139,137,136,134,132,130,128,127,125,123,121,119,117,115,114,112,111,109,107,105,104,102,100,98,97,95,93,91,90,89,87,86,84,82,80,78,76,75,74,73,72,71,69,68,67,66,65,64,62,62,62,61,60,58,57,56,55,54,53,53,52,51,50,49,49,48,47,47,46,46,45,45,45,44,44,44,44,44,43,43,43,43,43,43,43,43,43,43,43,43,44,44,44,45,45,45,45,46,47,48,49,50,52,53,54,55,56,56,57,58,59,60,61,63,64,66,67,68,69,71,73,75,77,79,81,83,86,88,89,91,94,96,98,100,102,104,106,108,110,112,114,116,118,121,123,124,126,128,130,131,133,135,137,139,141,142,143,144,146,148,149,150,152,154,155,157,159,161,163,164,165,167,170,172,175,177,180,181,184,187,189,192,195,197,199,202,204,205,206,208,210,212,214,216,216,218,220,222,224,225,226,228,230,232,233,236,238,239,241,243,245,247,249,251,253,255,257,258,259,261,263,264,265,266,268,269,269,271,272,272,274,275,276,277,279,280,281,281,283,284,285,285,286,287,287,288,288,289,289,289,290,292,293,294,294,295,295,296,297,297,297,298,298,298,299,299,299,299,300,300,301,301,302,302,302,303,303,303,303,303,303,303,303,303,303,303,303,303,304,304,304,305,305,305,305,305,305,305,305,306,306,307,307,307,307,307,307,308,308,308,308,308,308,308,309,309,309,309,309,309,309,309,309,309,309,310,310,312,313,313,313,314,315,316,318,319,320,322,323,325,326,327,328,330,331,332,334,335,337,338,340,341,343,344,344,345,347,348,348,350,352,353,354,356,356,358,359,360,362,364,365,367,369,370,372,374,376,378,380,381,383,385,388,390,393,396,399,401,403,405,407,410,412,413,415,416,418,420,422,424,426,428,429,431,432,434,435,437,438,440,442,445,446,447,449,449,450,451,453,455,455,457,458,459,461,462,463,464,465,465,466,466,466,466,466,466,465,464,464,463,463,462,461,460,459,457,455,454,452,451,450,448,446,445,443,441,439,437,435,433,431,429,427,426,424,422,419,417,415,412,409,406,404,401,400,397,394,392,389,386,383,379,376,372,370,368,366,364,362,360,358,355,353,351,349,346,344,342,339,336,334,331,329,327,325,322,320,317,315,313,310,307,305,302,299,297,294,292,290,287,284,281,278,275,273,271,268,266,265,263,262,260,259,257,256,255,253,251,250,249,247,245,244,243,242,240,238,236,235,234,232,230,229,228,225,224,222,220,218,216,214,212,211,210,209,207,206,205,204,203,202,200,198,197,196,195,193,191,189,188,187,185,184,183,182,181,180,179,178,177,176,174,172,171,169,168,168,167,166,164,163,161,160,159,157,156,154,153,152,150,148,146,144,142,140,138,136,134,133,132,131,129,127,126,125,124,122,121,119,118,116,115,114,112,110,109,108,106,104,102,101,99,98,97,95,93,92,91,89,88,86,85,84,83,82,81,79,78,77,76,75,74,73,72,72,71,70,69,69,68,67,67,67,66,66,66,66,66,66,66,66,67,67,67,68,68,69,69,69,69,70,71,71,72,72,73,74,74,75,75,75,75,75,75,75,75,76,77,77,78,80,81,82,83,84,85,86,87,89,90,92,93,94,96,97,99,101,102,102,104,105,107,108,108,110,112,114,117,119,121,124,126,128,130,133,136,138,141,143,146,148,150,153,154,156,158,160,162,165,167,169,172,173,176,179,181,184,186,188,190,193,196,199,201,204,206,208,210,213,216,219,220,223,226,229,232,234,236,239,240,243,245,247,248,251,252,254,256,258,259,261,263,265,267,269,271,273,275,277,277,279,280,282,283,284,285,287,288,290,291,291,293,294,295,295,295,295,295,295,295,295,295,295,295,295,295,295,295,295,295,295,295,295,295,295,295,295,295,295,295,295,295,295,295,295,295,295,295,296,296,296,296,296,296,296,296,296,296,296,297,298,299,299,300,302,302,303,304,305,306,307,309,310,312,314,315,317,319,320,321,323,324,326,328,330,332,334,335,337,340,343,345,347,348,351,353,355,358,360,362,363,366,368,370,371,374,376,378,379,381,382,384,386,389,391,392,395,398,400,402,404,406,408,411,413,416,418,420,422,423,425,427,429,430,432,434,436,438,440,442,443,444,445,446,447,448,449,451,452,453,455,457,457,459,460,461,463,465,466,468,470,470,471,471,473,474,475,476,478,479,481,482,483,485,485,486,488,489,491,492,493,494,495,496,496,497,497,497,497,497,497,497,497,497,497,497,497,497,497,496,496,496,496,495,495,495,493,493,493,493,492,492,491,491,489,489,487,486,486,485,485,484,484,483,482,481,480,479,478,477,475,474,473,472,470,468,466,465,464,462,460,458,456,454,452,450,448,447,446,444,442,440,438,436,434,433,432,430,429,426,424,421,419,417,415,413,411,409,407,405,403,400,397,394,391,390,387,385,382,380,378,375,373,370,368,366,364,361,359,356,354,351,349,347,345,343,341,338,337,335,333,332,330,328,326,324,323,321,319,317,315,313,311,308,306,303,300,297,295,292,290,288,285,283,280,277,274,272,269,266,264,262,259,257,254,252,250,248,246,245,243,241,240,238,236,234,231,230,228,226,224,222,220,219,217,215,212,211,210,208,206,204,202,200,199,197,195,193,191,189,188,186,184,182,180,179,177,175,174,174,173,171,170,168,167,165,163,161,159,157,155,153,151,149,147,145,143,141,139,137,135,133,132,130,128,126,125,123,121,120,119,117,116,114,112,111,111,110,109,108,107,107,106,106,105,104,103,103,102,101,100,99,98,97,97,96,95,94,94,92,92,91,90,89,88,87,86,85,84,83,82,81,80,79,79,77,76,75,74,72,71,70,68,67,65,64,63,61,60,59,57,55,55,54,52,51,49,48,46,44,43,41,40,38,36,35,33,31,30,29,28,26,25,24,23,22,20,19,18,17,16,15,13,13,12,11,9,8,7,6,5,4,2,1,-1,-3,-4,-5,-6,-7,-9,-11,-12,-14,-15,-16,-16,-17,-17,-18,-18,-18,-19,-19,-19,-19,-19,-19,-19,-19,-19,-19,-19,-19,-19,-19,-19,-19,-19,-19,-19,-19,-19,-19,-19,-19,-19,-19,-19,-19,-19,-19,-19,-19,-19,-18,-17,-16,-16,-15,-14,-14,-14,-13,-12,-11,-11,-10,-9,-7,-6,-6,-5,-4,-2,-2,-2,-1,0,1,2,3,4,5,6,7,8};
		
		int len = iS.length;
		for(int i=0; i<len; i++)
			{
			Int2d p = new Int2d(iS[i],jS[i]);
			surface.add(p);
			}
		}
	else if(preset.equals("Completely random points"))
		{
		int np = 200;
		Random gen = new Random();
		for(int i=0; i<np; i++)
			{
			Int2d p = new Int2d(gen.nextInt(3*boardWidth)-boardWidth,gen.nextInt(3*boardHeight)-boardHeight);
			surface.add(p);
			}
		}
	else if(preset.equals("Random walk"))
		{
		int np = 200;
		Random gen = new Random();
		int numberOfWalks = 1;
		for(int k=0; k<numberOfWalks; k++)
			{
			Int2d pS = new Int2d(boardWidth/2,boardHeight/2);
			surface.add(pS);
			int maxStepSize = 50;
			for(int i=1; i<np; i++)
				{
				Int2d pold = surface.get(i-1);
				Int2d p = new Int2d(pold.x+gen.nextInt(2*maxStepSize+1)-maxStepSize,pold.y+gen.nextInt(2*maxStepSize+1)-maxStepSize);
				surface.add(p);
				}
			}
		}
		
	cd = new CalculateDistance(japp,this);
	}
	  	
	public void fillBG()
	{
	bufG.setColor(bgColor);
	bufG.fillRect(0,0,japp.bwMax,japp.bhMax);	
	}
  
	public void mousePressed(MouseEvent e)
	{
	int xP = e.getX();
	int yP = e.getY();
	//Point2d x = new Point2d(xP,yP);
	Int2d x = new Int2d(xP,yP);
	
	if(true)
		{
		surface.add(x);	
		//System.out.println(surface.isEmpty());
		}
	else
		{
		int i = xP/res;
		int j = yP/res;
		System.out.println(cd.phi[i][j]);
		}
		
	repaint();		
	}
	
	public void mouseReleased(MouseEvent e)
	{
	}
	
	
	public void mouseClicked(MouseEvent e)
	{	
	int xP = e.getX();
	int yP = e.getY();
	//Point2d x = new Point2d(xP,yP);
	Int2d x = new Int2d(xP,yP);
	int sl = surface.size();
	int minD = surface.get(0).distanceSquared(x);
	int minI = 0;
	
  for(int i=1; i<sl; i++)
    {
    int dCur = surface.get(i).distanceSquared(x);
    if(dCur < minD)
      {
      minI = i;
      minD = dCur;
      }
    }
    
  Int2d xClosest = new Int2d(surface.get(minI));
  if(!destinations.contains(xClosest)) destinations.add(xClosest);	
  //System.out.println(surface.isEmpty());
		
		
	repaint();		
	}
	
	public void mouseEntered(MouseEvent e)
	{
	}
	
	public void mouseExited(MouseEvent e)
	{
	}
			
	public void mouseDragged(MouseEvent e)
	{
	int xP = e.getX();
	int yP = e.getY();
	//Point2d x = new Point2d(xP-0.001,yP-0.001);
	//Point2d x = new Point2d(xP,yP);
	Int2d x = new Int2d(xP,yP);
	surface.add(x);	
		//System.out.println(surface.isEmpty());
	repaint();
	}
		
	public void mouseMoved(MouseEvent e)
	{
	}	
	
	
	public void keyTyped(KeyEvent e)
    {
    }

    public void keyPressed(KeyEvent e)
    {
	//System.out.println("pressed " + e.getKeyCode());
	
	if (e.getKeyCode() == 32) // 32 is space bar
	    {
		if(cd.active.size() > 0) cd.runAlgorithmStep();
		else System.out.println("Active vector empty");
		repaint();
		}
	
	if (e.getKeyCode() == 67) // 67 is "c"
	    {
		// Saves drawn surface to textfield
		String ijList = "{";
		for(int i=0; i<surface.size()-1; i++)
			{
			ijList = ijList+surface.get(i).x+",";
			}
		ijList = ijList+surface.get(surface.size()-1).x+"};\n {";
		
		for(int i=0; i<surface.size()-1; i++)
			{
			ijList = ijList+surface.get(i).y+",";
			}
		ijList = ijList+surface.get(surface.size()-1).y+"};";
		japp.resTextField.setText(ijList);
		//System.out.println(ijList);
		}
	
	if (e.getKeyCode() == 68) // 68 is "d"
	    {
		}
	
	if (e.getKeyCode() == 69) // 69 is "e"
	    {
		}
		
	
	if (e.getKeyCode() == 61) // = and + key
	    {
		}

	if (e.getKeyCode() == 45) // - and _ key
	    {
	    }
    }
	
	

    public void keyReleased(KeyEvent e)
    {	
    }
	
	public boolean withinBounds(int i, int j)
	{
	return i>-1 && i<boardWidth && j>-1 && j<boardHeight;
	}	
	
	public Color colorOf(double value)
	{
	//0 corresponds to blue and +1 to red. If value is not within [0,1] goes to white as value increases to white at maxV, black at minV
	
	double minV = -0.5;
	double maxV = 0.5;
	
	value = 1-value;
	if(value > maxV+1) return Color.BLACK;
	if(value < minV) return Color.WHITE;
	int red = 0;
	int green = 0;
	int blue = 0;
	if(value<0)
		{
		red = 255;
		green = (int)(value*255/minV);		
		blue = (int)(value*255/minV);	
		}
	else if(value<0.25)
		{
		red = 255;
		green = (int)(value*255/0.25);
		}
	else if(value<0.5)
		{
		red = 2*255 - (int)(value*255/0.25);
		green = 255;
		}
	else if(value<0.75)
		{							
		green = 255;
		blue = -2*255 + (int)(value*255/0.25);
		}
	else if(value <= 1)
		{							
		green = 255*4 - (int)(value*255/0.25);
		blue = 255;
		}
	else if(value <= 1+maxV)
		{
		blue = 255-(int)((value-1)*255/maxV);
		}
	//System.out.println(red + " " + green + " " + blue);
	//System.out.println(value);
	return new Color(red,green,blue);
	}
	
	public void update(Graphics g)
    {
	
	if (!buffer.equals(null)) {
	bufG = buffer.getGraphics();
	//bufG.setColor(Color.BLACK);	
	
	bufG.dispose();
	
	paint(g);	
	g.dispose();
	}
	}
	
	public void paint(Graphics g)
	{
	if (!buffer.equals(null)) {
	bufG = buffer.getGraphics();
	
	//bufG.setColor(Color.BLACK);
	bufG.setColor(Color.WHITE);
	bufG.fillRect(0,0,boardWidth,boardHeight);
	bufG.setColor(Color.BLACK);	
		
	if(japp.colorCheckBox.isSelected() && cd!=null)
		{
		
		for(int i=0; i<boardWidth; i++)
			{
			for(int j=0; j<boardHeight; j++)
				{
				//if(i==j) bufG.fillRect(i,boardHeight-j-1,1,1);
				
				double interp = cd.phiInterpolateCR((double)i,(double)j);
				if(interp <= 0)
					{
					bufG.setColor(colorOf(-interp/cd.maxPhi));
					//double v = -1;
					//Vector2D vel = new Vector2D(fs.uInterpolate(i,j),fs.vInterpolate(i,j));
					//v = vel.magnitude()/colorScale;
					//bufG.setColor(colorOf(v));
					//bufG.fillRect(i,boardHeight-j-1,1,1);
					bufG.fillRect(i,j-1,1,1);
					}
				else
					{
					bufG.setColor(colorOf(1-interp/cd.maxPhi));
					bufG.fillRect(i,j-1,1,1);
					}
				}
			}
		}
	
	if(!surface.isEmpty() && japp.showBoundaryCheckBox.isSelected())
		{
		bufG.setColor(Color.BLACK);	
		//System.out.println("hi there");
		Int2d x = surface.get(0);
		Int2d xN;
		int sl = surface.size();
		for(int i=0; i<sl-1; i++)
			{
			xN = surface.get(i+1);
			bufG.drawLine((int)x.x,(int)x.y,(int)xN.x,(int)xN.y);
			//bufG.fillRect((int)x.x,(int)x.y,1,1);
			x = xN;
			}
		if(closeInterface)
			{
			xN = surface.get(0);
			bufG.drawLine((int)x.x,(int)x.y,(int)xN.x,(int)xN.y);		
			}
		int dl = destinations.size();
		bufG.setColor(Color.YELLOW);	
		for(int i=0; i<dl; i++)
			{
			Int2d di = destinations.get(i);
			bufG.drawOval(di.x-pRadius,di.y-pRadius,2*pRadius,2*pRadius);
			}			
		}
		
	if(japp.drawGridCheckBox.isSelected())
		{
		bufG.setColor(new Color(150,150,150));	
		for(int i=0; i<pixelsWide; i++)
			{
			bufG.drawLine(res*i,0,res*i,boardHeight);
			}
		for(int j=0; j<pixelsHigh; j++)
			{
			bufG.drawLine(0,res*j,boardWidth,res*j);
			}
			
		if(cd!=null)
			{
			bufG.setColor(Color.RED);	
			int len = cd.boundary.size();
			for(int in=0; in<len; in++)
				{
				Int2d pi = cd.boundary.get(in);
				bufG.drawOval(res*pi.x-pRadius,res*pi.y-pRadius,2*pRadius,2*pRadius);
				}
			
			}
		}
			
	
	}
	
	g.drawImage(buffer, 0, 0, this);
		g.dispose();
	}
	
}